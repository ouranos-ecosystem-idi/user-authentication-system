// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	authentication "authenticator-backend/domain/model/authentication"
	input "authenticator-backend/usecase/input"

	mock "github.com/stretchr/testify/mock"

	output "authenticator-backend/usecase/output"
)

// IVerifyUsecase is an autogenerated mock type for the IVerifyUsecase type
type IVerifyUsecase struct {
	mock.Mock
}

// ApiKey provides a mock function with given fields: _a0
func (_m *IVerifyUsecase) ApiKey(_a0 input.VerifyAPIKeyParam) output.VerifyApiKeyResponse {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ApiKey")
	}

	var r0 output.VerifyApiKeyResponse
	if rf, ok := ret.Get(0).(func(input.VerifyAPIKeyParam) output.VerifyApiKeyResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(output.VerifyApiKeyResponse)
	}

	return r0
}

// IDToken provides a mock function with given fields: _a0
func (_m *IVerifyUsecase) IDToken(_a0 input.VerifyIDTokenParam) (authentication.Claims, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IDToken")
	}

	var r0 authentication.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(input.VerifyIDTokenParam) (authentication.Claims, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.VerifyIDTokenParam) authentication.Claims); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(authentication.Claims)
	}

	if rf, ok := ret.Get(1).(func(input.VerifyIDTokenParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenIntrospection provides a mock function with given fields: _a0
func (_m *IVerifyUsecase) TokenIntrospection(_a0 input.VerifyTokenParam) (output.VerifyTokenResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for TokenIntrospection")
	}

	var r0 output.VerifyTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(input.VerifyTokenParam) (output.VerifyTokenResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.VerifyTokenParam) output.VerifyTokenResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(output.VerifyTokenResponse)
	}

	if rf, ok := ret.Get(1).(func(input.VerifyTokenParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVerifyUsecase creates a new instance of IVerifyUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVerifyUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVerifyUsecase {
	mock := &IVerifyUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
